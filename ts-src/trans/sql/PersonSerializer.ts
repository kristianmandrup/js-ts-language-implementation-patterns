import { Person } from "./Person";
import { Connection, ResultSet } from "./Db";
/***
 * Excerpted from "Language Implementation Patterns",
 * published by The Pragmatic Bookshelf.
 * Copyrights apply to this code. It may not be used to create training material,
 * courses, books, articles, and the like. Contact us if you are in doubt.
 * We make no guarantees that this code is fit for any purpose.
 * Visit http://www.pragmaticprogrammer.com/titles/tpdsl for more book information.
 ***/
// This file automatically generated by "java DBGen -java"

export class PersonSerializer {
  static ID = 1;
  /** Init code to set ID to it's previous value in database */
  public static init(con: Connection): void {
    const stat = con.createStatement();
    const rs = stat.executeQuery("SELECT MAX(ID) from Person;");
    rs.next();
    PersonSerializer.ID = rs.getInt(1) + 1;
  }
  public static savePerson(con: Connection, o: Person): void {
    const prep = con.prepareStatement(
      "INSERT into Person SET ID=?, " + "name=?, SSN=?, birthDay=?, age=?;"
    );
    const Person_ID = PersonSerializer.ID++;
    prep.setInt(1, Person_ID);
    prep.setString(1 + 1, o.name);
    prep.setString(2 + 1, o.SSN);
    prep.setDate(3 + 1, o.birthDay);
    prep.setInt(4 + 1, o.age);
    PersonSerializer.save_Person_roles(con, o.roles, Person_ID);
    PersonSerializer.save_Person_vacation(con, o.vacation, Person_ID);
    if (prep.executeUpdate() != 1) {
      console.error("couldn't save " + o);
    }
  }
  static save_Person_roles(
    con: Connection,
    roles: string[],
    Person_ID: number
  ): void {
    if (roles == null) return;
    const prep = con.prepareStatement(
      "INSERT into Person_roles (roles," + "Person_ID) values (?, ?);"
    );
    for (let o of roles) {
      prep.setString(1, o);
      prep.setInt(2, Person_ID);
      if (prep.executeUpdate() != 1) {
        console.log("couldn't save field roles");
      }
    }
    prep.close();
  }

  static save_Person_vacation(
    con: Connection,
    vacation: Date[],
    Person_ID: number
  ): void {
    if (vacation == null) return;
    const prep = con.prepareStatement(
      "INSERT into Person_vacation (vacation," + "Person_ID) values (?, ?);"
    );
    for (let o of vacation) {
      prep.setDate(1, o);
      prep.setInt(2, Person_ID);
      if (prep.executeUpdate() != 1) {
        console.error("couldn't save field vacation");
      }
    }
    prep.close();
  }

  public static nextPerson(con: Connection, rs: ResultSet): Person {
    const Person_ID = rs.getInt("ID");
    const o = new Person();
    o.name = rs.getString("name");
    o.SSN = rs.getString("SSN");
    o.birthDay = rs.getDate("birthDay");
    o.age = rs.getInt("age");
    o.roles = PersonSerializer.get_Person_roles(con, Person_ID);
    o.vacation = PersonSerializer.get_Person_vacation(con, Person_ID);
    return o;
  }

  static get_Person_roles(con: Connection, ID: number): string[] {
    const q = "SELECT roles FROM Person_roles WHERE Person_ID=" + ID;
    const stat = con.createStatement();
    const rs = stat.executeQuery(q);
    const elements: string[] = [];
    while (rs.next()) {
      elements.push(rs.getString("roles"));
    }
    rs.close();
    stat.close();
    return elements;
  }

  static get_Person_vacation(con: Connection, ID: number): Date[] {
    const q = "SELECT vacation FROM Person_vacation WHERE Person_ID=" + ID;
    const stat = con.createStatement();
    const rs = stat.executeQuery(q);
    const elements: Date[] = [];
    while (rs.next()) {
      elements.push(rs.getDate("vacation"));
    }
    rs.close();
    stat.close();
    return elements;
  }
}
